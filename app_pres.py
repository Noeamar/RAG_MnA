import streamlit as st
from poc_RAG import rag_fusion, rag_fusion_actualites, rag_fusion_fonds, rag_fusion_fiche_societe_to_word, generate_fiche_societe, rag_fusion_multiples_transactions_comparables  # Importer votre fonction rag_fusion
from langchain.document_loaders import WebBaseLoader  
import os  

#from poc_RAG import rag_fusion_all, rag_fusion_actualites, rag_fusion_fonds  
# Assurez-vous de cr√©er ou d'importer vos fonctions qui interrogent les donn√©es segment√©es.
# Exemple :
# rag_fusion_all() -> interroge la base Actualit√©s + Entreprises + Fonds
# rag_fusion_actualites() -> interroge la base d√©di√©e aux actualit√©s
# rag_fusion_fonds() -> interroge la base d√©di√©e aux fonds

# ===============================
# Configuration principale
# ===============================
st.set_page_config(
    page_title="IA pour le M&A",
    page_icon="üíº",
    layout="centered"
)

# ===============================
# En-t√™te de l'application
# ===============================
st.title("L'IA pour le M&A üíº")
st.write("**Simplifiez votre analyse de march√© et vos recherches gr√¢ce √† notre assistant intelligent.**")

# ===============================
# Menu de navigation
# ===============================
menu = st.sidebar.radio(
    "Navigation",
    options=["Accueil", "Donn√©es compl√®tes (Actu+Entreprises+Fonds)", "Actualit√©s", "Fonds", "Transactions comparables", "Analyse avanc√©e"]
)

# ===============================
# Logique pour chaque menu
# ===============================
if menu == "Accueil":
    st.header("Bienvenue sur l'application IA pour le M&A üí°")
    st.write(
        """
        Cette application vous aide √† g√©n√©rer des fiches sur des entreprises, des fonds 
        ou √† analyser les actualit√©s li√©es au M&A gr√¢ce √† l'IA.
        
        Utilisez le menu de gauche pour s√©lectionner la source de donn√©es que vous souhaitez interroger.
        """
    )

elif menu == "Donn√©es compl√®tes (Actu+Entreprises+Fonds)":
    st.header("Interroger la base compl√®te (Actualit√©s, Entreprises, Fonds)")
    st.write(
        """
        Posez une question ici, l'IA interrogera la base compl√®te qui comprend 
        les actualit√©s, les entreprises et les fonds.
        """
    )
    
    question = st.text_input("Posez votre question :", "")
    if question:
        try:
            # Appeler la fonction rag_fusion_all avec la question
            answer = rag_fusion(question)
            st.write("R√©ponse g√©n√©r√©e par l'IA :")
            st.success(answer)
        except Exception as e:
            st.error(f"Une erreur est survenue lors de la g√©n√©ration de la r√©ponse : {e}")

elif menu == "Actualit√©s":
    st.header("Interroger la base d'actualit√©s ou demander une fiche")
    st.write(
        """
        Posez une question ici, l'IA interrogera uniquement la base d√©di√©e aux actualit√©s.
        """
    )
    
    question = st.text_input("Posez votre question ou demandez votre fiche (Actualit√©s) :", "")
    if question:
        try:
            # Appeler la fonction rag_fusion_actualites
            answer = rag_fusion_actualites(question)
            st.write("R√©ponse g√©n√©r√©e par l'IA :")
            st.success(answer)
        except Exception as e:
            st.error(f"Une erreur est survenue lors de la g√©n√©ration de la r√©ponse : {e}")
    
    # --- Ajouter la fonctionnalit√© de g√©n√©ration de fiche entreprise ---
    st.subheader("G√©n√©rer une fiche entreprise √† partir de la r√©ponse du LLM")
    
    # Saisie manuelle du nom de l'entreprise
    company_name = st.text_input("Entrez le nom de l'entreprise :", "")
    
    if st.button("G√©n√©rer la fiche entreprise"):
        if company_name.strip() == "":
            st.error("Veuillez entrer le nom de l'entreprise.")
        else:
            try:
                # Formulez une question pertinente pour obtenir les informations de l'entreprise
                company_question = f"Fournis-moi une fiche d√©taill√©e pour l'entreprise {company_name}."
                
                # Interroger le LLM via la fonction RAG modifi√©e
                company_data = rag_fusion_fiche_societe_to_word(company_question)
                
                # Chemin vers le template Word
                template_path = "C:\\Users\\namar\\Documents\\poc_RAG\\Projet_test\\RAG_MnA\\Data\\Template - Fiche soci√©t√©.docx"
                    
                # V√©rifiez si le template existe
                if not os.path.exists(template_path):
                    st.error(f"Le fichier template Word n'a pas √©t√© trouv√© √† : {template_path}")
                else:
                    # Chemin de sortie
                    output_dir = "C:\\Users\\namar\\Documents\\poc_RAG\\Projet_test\\RAG_MnA\\Data\\Fiches"
                    os.makedirs(output_dir, exist_ok=True)  # Cr√©e le dossier s'il n'existe pas
                    output_path = os.path.join(output_dir, f"{company_name}_fiche_societe.docx")
                    
                    # Remplir le template avec les donn√©es du LLM
                    generate_fiche_societe(company_data, template_path, output_path)
                    
                    # Lire le fichier en bytes pour le t√©l√©charger
                    with open(output_path, "rb") as f:
                        doc_bytes = f.read()
                    st.download_button(
                        label="T√©l√©charger la fiche entreprise",
                        data=doc_bytes,
                        file_name=f"{company_name}_fiche_societe.docx",
                        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                    )
                    st.success("Fiche entreprise g√©n√©r√©e avec succ√®s.")
            except Exception as e:
                st.error(f"Une erreur est survenue lors de la g√©n√©ration de la fiche entreprise : {e}")

elif menu == "Fonds":
    st.header("Interroger la base de donn√©es sur les fonds")
    st.write(
        """
        Posez une question ici, l'IA interrogera uniquement la base d√©di√©e aux fonds.
        """
    )
    
    question = st.text_input("Posez votre question (Fonds) :", "")
    if question:
        try:
            # Appeler la fonction rag_fusion_fonds
            answer = rag_fusion_fonds(question)
            st.write("R√©ponse g√©n√©r√©e par l'IA :")
            st.success(answer)
        except Exception as e:
            st.error(f"Une erreur est survenue lors de la g√©n√©ration de la r√©ponse : {e}")

elif menu == "Transactions comparables":
    st.header("Interroger la base de donn√©es sur les transactions comparables et les multiples")
    st.write(
        """
        Posez une question ici, l'IA interrogera uniquement la base d√©di√©e aux transactions comparables 
        et aux multiples financiers (e.g., EV/Revenue, EV/EBITDA, EV/EBIT). 
        Obtenez des informations pertinentes sur des transactions similaires, leurs caract√©ristiques et leurs multiples.
        """
    )
    
    question = st.text_input("Posez votre question (Transactions comparables) :", "")
    if question:
        try:
            # Appeler la fonction rag_fusion_multiples_transactions_comparables
            answer = rag_fusion_multiples_transactions_comparables(question)
            st.write("R√©ponse g√©n√©r√©e par l'IA :")
            st.success(answer)
        except Exception as e:
            st.error(f"Une erreur est survenue lors de la g√©n√©ration de la r√©ponse : {e}")


elif menu == "Analyse avanc√©e":
    st.header("Analyse avanc√©e üîç")
    st.write(
        """
        Cette section sera d√©di√©e √† des analyses complexes et des visualisations avanc√©es. 
        Fonctionnalit√©s √† venir dans une prochaine version !
        """
    )